
Test du magnétomètre de l'IMU.

Récupération des valeurs des 3 capteurs dans des variables (16 bits).
	Uniquement les valeurs des coordonnées x et y sont utilisés car on
	considère que le robot sera toujours sur un terrain plat.

	Ces valeurs sont stockées dans un vecteur de dimension 2 afin de pouvoir
	effectuer des calculs simples comme la normalisation ou la rotation du
	vecteur.

Problème observé :
	La mesure a été effectuée dans un train en mouvement, les données ne
	sont donc pas pertinentes mais on peut quand même observer que si l'on
	effectue une révolution complète du capteur, l'angle du vecteur se
	limite uniquemenet à une partie de l'intervalle.
	Il faut donc prendre en compte toutes les possibilités d'erreurs :
		- le champ magnétique terrestre est peut être perturbé par un autre
		champ plus fort.
		- la mesure du capteur est peut être un peu plus compliqué à
		traiter.
		- la projection du vecteur 3D du capteur dans le plan XY est peut
		être à l'origine du problème (en tout cas je pense que c'est une
		mauvaise idée de ne pas utiliser le capteur en Z).

Recherche de solution :
	D'après la doc du MPU9150, il existe une donnée (sensitivy adjustment
	values) qui pourrait être utile. Elle va peut être corriger le
	problème. On va donc tester ça.

Test de l'ajustement de valeur :
	L'ajustement de valeur est une valeur constante que l'on peut
	multiplier au vecteur du champ magnétique. Il ne fait rien d'autre que
	de multiplier toutes les composantes par 0.5. Ça n'a donc pas résolu le
	problème.

Avec gnuplot, j'ai pu observer un peu la répartition des points mesurés
dans un espace à 3 dimensions. On voit alors clairement que ces points sont
répartis sur un cylindre qui n'est pas centré en zéro. La solution sera
donc de translater le repère pour que les points forment un cylindre de
révolution centré sur 0.

Après quelques mesures et réglages, on peut déterminer que le capteur
selon X est décalé de 12 et que le capteur selon Y est décalé de 100. On
peut alors se demander d'où vient ce biais ? En tout cas la doc n'en parle
pas ou alors c'est bien caché.


Prochaine étape : contrôler le référencielle (en rotation)

J'vais d'abord commencer par réorganiser le code de façon un peu plus
structuré. Normalement le capteur que sera utilisé n'est pas celui sur
lequel les mesures ont été effectué actuellement. Il est donc plus
judicieux d'écrire une classe qui va s'abstraire du composant utilisé pour
ne fournir que les méthodes qui nous intéressent.
Dans notre cas on besoin de :
	- récupérer l'angle (soit en radian, soit en degrée, peu importe)
	- définir le référencielle.
Pour la récupération de l'angle, il suffira d'utiliser la classe Vector
écrite précédement. Cependant l'angle sera calculé par rapport à l'angle de
référence. Cet angle pourra bien évidement être redéfinit quand on veut.

Après écriture du code, le changement de référentielle fonctionne sans
problème. J'ai ajouté un bouton sur la carte pour créer un nouveau
référentielle et donc remettre l'angle à 0. Il faut alors vérifier que lors
du changement d'origine, l'angle continue de varier entre 180° et -180°.
Mais la méthode rotate() de la classe vecteur fonctionne sans aucun
problème. La rotation est donc parfaite.

Pour observer de façon plus ergonomique l'évolution du capteur, on va
maintenant essayer de mettre en place une petite boussole graphique à
l'aide de Qt afin d'afficher en temps réel l'angle mesuré. Thomas
s'occupera de la boussole (les valeurs seront prise depuis l'entré
standard) pendant que j'écrierais un programme qui affiche sur sa sortie
standard le contenu du port serie. Il n'y aura plus qu'à chainer les deux
programmes (rediriger la sortie de l'un dans l'entrée de l'autre) pour voir
la boussole suivre les mouvements du capteur.

Bilan des 2 programmes :
L'affichage marche nickel mis à part le fait que l'aiguille tourne dans le
sens inverse. L'adaptation n'est pas très compliquée. On remarque ainsi
plus facilement que le capteur est assez bruité et très sensible aux
objets métalliques qui passe à proximité. Il va donc falloir mettre en
place un filtre (sûrement un filtre de Kalman) pour lisser le mouvement.
Une autre chose qu'il faudra également faire quand le capteur sera en place
sur le robot sera de recalculer l'influence du champ magnétique du robot sur
le capteur afin d'améliorer la précision des mesures.

Prochaine étape : test du shield ethernet

Etant donné que les données du capteur seront par la suite transmise en
wifi ou en éthernet, il va falloir tester les cartes. Il y aura grande
chance que par la suite on utilisera plutôt l'ethernet que le wifi pour
plusieurs raisons :
	- la borne wifi est intégré au robot. C'est un peu stupide d'utiliser
	le Wifi pour un truc qui est à 10 cm.
	- la qualité du réseau en ethernet est meilleur
	- d'autres trucs

Prochaine étape : filtre de Kalman
